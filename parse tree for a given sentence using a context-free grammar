class ParseTreeNode:
    def __init__(self, value, children=None):
        self.value = value
        self.children = children if children is not None else []

    def __str__(self):
        return self.value

    def add_child(self, child):
        self.children.append(child)

    def is_leaf(self):
        return len(self.children) == 0


class CFG:
    def __init__(self, rules):
        self.rules = rules

    def parse(self, input_string):
        chart = [[] for _ in range(len(input_string) + 1)]
        chart[0] = [(rule, 0, 0, ParseTreeNode(rule[0])) for rule in self.rules['S']]

        for i in range(len(input_string) + 1):
            while True:
                added = False
                for entry in chart[i]:
                    rule, start, dot, tree_node = entry
                    if dot < len(rule):
                        next_symbol = rule[dot]
                        if next_symbol in self.rules:
                            for new_rule in self.rules[next_symbol]:
                                new_tree_node = ParseTreeNode(next_symbol)
                                chart[i].append((new_rule, i, 0, new_tree_node))
                                tree_node.add_child(new_tree_node)
                    elif i < len(input_string) and next_symbol == input_string[i]:
                        new_tree_node = ParseTreeNode(next_symbol)
                        chart[i + 1].append((rule, start, dot + 1, new_tree_node))
                        tree_node.add_child(new_tree_node)
                        added = True
                if not added:
                    break

                # Earley completion
                for j in range(i + 1, len(chart)):
                    for entry in chart[j]:
                        _, start, dot, tree_node = entry
                        if dot == len(chart[start][start][0]):
                            new_tree_node = ParseTreeNode(chart[start][start][0][0])
                            chart[i].append((chart[start][start][0], start, dot + 1, new_tree_node))
                            tree_node.add_child(new_tree_node)

        return chart[-1]


def print_parse_tree(node, depth=0):
    if node is None:
        return
    if node.is_leaf():
        print("  " * depth + node.value)
    else:
        print("  " * depth + node.value)
        for child in node.children:
            print_parse_tree(child, depth + 1)


# Example usage:
if __name__ == "__main__":
    # Define the grammar rules
    grammar_rules = {
        'S': [['NP', 'VP']],
        'NP': [['Det', 'N']],
        'VP': [['V', 'NP']],
        'Det': ['the', 'a'],
        'N': ['cat', 'dog'],
        'V': ['chased', 'ate']
    }

    # Create a CFG object
    cfg = CFG(grammar_rules)

    # Parse and print parse tree
    parse_result = cfg.parse("the cat chased the dog")
    if parse_result:
        parse_tree = parse_result[0][3]
        print("Parse Tree:")
        print_parse_tree(parse_tree)
    else:
        print("Failed to parse the input sentence.")
